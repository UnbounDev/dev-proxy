#!/usr/bin/env node

var fs = require("fs");
var proxy = require("http-proxy");
var chalk = require("chalk");
var program = require("commander");
var path = require("path");
var assert = require("assert");

function getAbsolutePath(str) {
  return str && !path.isAbsolute(str)
    ? path.resolve(process.cwd(), str)
    : str;
}

function processPorts(val, acc) {
  const vals = val.split(':');

  const obj = {
    localPort: 443,
    remotePort: null,
    remoteHost: 'localhost',
  };

  switch (vals.length) {
  case 1:
    obj.remotePort = vals[0];
    break;
  case 2:
    obj.remotePort = vals[0];
    obj.localPort = vals[1];
    break;
  case 3:
    obj.remoteHost = vals[0];
    obj.remotePort = vals[1];
    obj.localPort = vals[2];
    break;
  default:
    throw new Error(`Invalid proxy option: ${val}`);
  }

  acc.push(obj);
  return acc;
}

program
  .version('2.2.0')
  .option('-p --proxy <source:target>', 'ports to proxy. eg: --proxy remotehost:9000:9443 will cause https://localhost:9443/ to serve content from http://remotehost:9000/', processPorts, [])
  .option('-k --key [keyPath]', 'optional path to key file')
  .option('-c --cert [certPath]', 'optional path to cert file')
  .parse(process.argv);

var key = getAbsolutePath(program.key) || path.resolve(__dirname, '..', 'resources', 'localhost.key');
var cert = getAbsolutePath(program.cert) || path.resolve(__dirname, '..', 'resources', 'localhost.cert');
var proxies = program.proxy;

try {
  assert(fs.existsSync(key), 'Could not find key at: ' + key);
  assert(fs.existsSync(cert), 'Could not find certificate at: ' + cert);
} catch (e) {
  console.error(chalk.red(e.message));
  process.exit(1);
}

proxies.forEach(function(config) {
  const { localPort, remotePort, remoteHost } = config;

  proxy.createServer({
    xfwd: true,
    ws: true,
    target: {
      host: remoteHost,
      port: remotePort,
    },
    ssl: {
      key: fs.readFileSync(key, "utf8"),
      cert: fs.readFileSync(cert, "utf8")
    }
  }).on("error", function(err, req, res) {
    console.error(chalk.red(chalk.bold(`${err.code} http://${remoteHost}:${remotePort}${req.url}`)));
    res.destroy();
  }).listen(localPort);

  console.log(chalk.green(`Started: http://${remoteHost}:${remotePort} â†’ https://localhost:${localPort}`));
});
